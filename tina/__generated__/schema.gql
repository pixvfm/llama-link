# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PageFilter): PageConnection!
  post(relativePath: String): Post!
  postConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PostFilter): PostConnection!
  author(relativePath: String): Author!
  authorConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: AuthorFilter): AuthorConnection!
  nav(relativePath: String): Nav!
  navConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: NavFilter): NavConnection!
}

input DocumentFilter {
  page: PageFilter
  post: PostFilter
  author: AuthorFilter
  nav: NavFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Page | Post | Author | Nav | Folder

type PageBlocksWelcomeHeroLinks {
  link: String
  label: String
  style: String
}

type PageBlocksWelcomeHero {
  message: JSON
  links: [PageBlocksWelcomeHeroLinks]
}

type PageBlocksFeatureListFeatures {
  icon: String
  label: String
  description: String
}

type PageBlocksFeatureList {
  byline: String
  message: JSON
  features: [PageBlocksFeatureListFeatures]
}

union PageBlocksFeaturedReadingFeaturedPost = Post

type PageBlocksFeaturedReading {
  label: String
  featuredPost: PageBlocksFeaturedReadingFeaturedPost
}

union PageBlocks = PageBlocksWelcomeHero | PageBlocksFeatureList | PageBlocksFeaturedReading

type Page implements Node & Document {
  title: String
  blocks: [PageBlocks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input PageBlocksWelcomeHeroLinksFilter {
  link: StringFilter
  label: StringFilter
  style: StringFilter
}

input PageBlocksWelcomeHeroFilter {
  message: RichTextFilter
  links: PageBlocksWelcomeHeroLinksFilter
}

input PageBlocksFeatureListFeaturesFilter {
  icon: StringFilter
  label: StringFilter
  description: StringFilter
}

input PageBlocksFeatureListFilter {
  byline: StringFilter
  message: RichTextFilter
  features: PageBlocksFeatureListFeaturesFilter
}

input PageBlocksFeaturedReadingFeaturedPostFilter {
  post: PostFilter
}

input PageBlocksFeaturedReadingFilter {
  label: StringFilter
  featuredPost: PageBlocksFeaturedReadingFeaturedPostFilter
}

input PageBlocksFilter {
  welcomeHero: PageBlocksWelcomeHeroFilter
  featureList: PageBlocksFeatureListFilter
  featuredReading: PageBlocksFeaturedReadingFilter
}

input PageFilter {
  title: StringFilter
  blocks: PageBlocksFilter
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

union PostAuthor = Author

type Post implements Node & Document {
  title: String
  author: PostAuthor
  image: String
  description: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input PostAuthorFilter {
  author: AuthorFilter
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input PostFilter {
  title: StringFilter
  author: PostAuthorFilter
  image: ImageFilter
  description: StringFilter
  body: RichTextFilter
}

type PostConnectionEdges {
  cursor: String!
  node: Post
}

type PostConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PostConnectionEdges]
}

type Author implements Node & Document {
  name: String
  image: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input AuthorFilter {
  name: StringFilter
  image: ImageFilter
}

type AuthorConnectionEdges {
  cursor: String!
  node: Author
}

type AuthorConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [AuthorConnectionEdges]
}

type NavLinks {
  label: String
  link: String
}

type Nav implements Node & Document {
  links: [NavLinks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input NavLinksFilter {
  label: StringFilter
  link: StringFilter
}

input NavFilter {
  links: NavLinksFilter
}

type NavConnectionEdges {
  cursor: String!
  node: Nav
}

type NavConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [NavConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
  updatePost(relativePath: String!, params: PostMutation!): Post!
  createPost(relativePath: String!, params: PostMutation!): Post!
  updateAuthor(relativePath: String!, params: AuthorMutation!): Author!
  createAuthor(relativePath: String!, params: AuthorMutation!): Author!
  updateNav(relativePath: String!, params: NavMutation!): Nav!
  createNav(relativePath: String!, params: NavMutation!): Nav!
}

input DocumentUpdateMutation {
  page: PageMutation
  post: PostMutation
  author: AuthorMutation
  nav: NavMutation
  relativePath: String
}

input DocumentMutation {
  page: PageMutation
  post: PostMutation
  author: AuthorMutation
  nav: NavMutation
}

input PageBlocksWelcomeHeroLinksMutation {
  link: String
  label: String
  style: String
}

input PageBlocksWelcomeHeroMutation {
  message: JSON
  links: [PageBlocksWelcomeHeroLinksMutation]
}

input PageBlocksFeatureListFeaturesMutation {
  icon: String
  label: String
  description: String
}

input PageBlocksFeatureListMutation {
  byline: String
  message: JSON
  features: [PageBlocksFeatureListFeaturesMutation]
}

input PageBlocksFeaturedReadingMutation {
  label: String
  featuredPost: String
}

input PageBlocksMutation {
  welcomeHero: PageBlocksWelcomeHeroMutation
  featureList: PageBlocksFeatureListMutation
  featuredReading: PageBlocksFeaturedReadingMutation
}

input PageMutation {
  title: String
  blocks: [PageBlocksMutation]
}

input PostMutation {
  title: String
  author: String
  image: String
  description: String
  body: JSON
}

input AuthorMutation {
  name: String
  image: String
}

input NavLinksMutation {
  label: String
  link: String
}

input NavMutation {
  links: [NavLinksMutation]
}

schema {
  query: Query
  mutation: Mutation
}
